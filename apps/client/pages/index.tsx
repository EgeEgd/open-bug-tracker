/**
 * /* eslint-disable react/no-unescaped-entities
 *
 * @format
 */

import { Notification } from "@contentful/f36-components";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";
import LoginButton from "../components/newProject/LoginButton";
import { api } from "../lib/api";
import { UseUser } from "../lib/auth";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const localHost = "http://localhost:";
  const PORT3000 = "3000/";
  const PORT8080 = "8080/";

  const router = useRouter();
  const { token } = router.query;

  const { setToken } = UseUser();
  useEffect(() => {
    const bearer = api.defaults.headers.common["Authorization"];

    console.log(bearer);
    if (typeof token === "string") {
      setToken(token);
      console.log("token: ", token);
      Notification.setPlacement("top");
      Notification.success(
        "You are successfully logged in. You can now create a new project or explore an existing one."
      );
      Notification.setDuration(100000);
      router.push("/", undefined, { shallow: true });
    }
  }, [router, setToken, token]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to the Bug Tracker</h1>

        <h1>Track errors and continously improve your app </h1>

        <p className={styles.description}>
          Follow these easy steps to begin tracking
        </p>

        <div className={styles.grid}>
          <a
            href={`${localHost + PORT8080}login/github`}
            className={styles.card}
          >
            <h2>1. Login with GitHub &rarr;</h2>
            <p>
              We made it easy. You only need to login using your GitHub account.
            </p>
          </a>

          <a href={`${localHost + PORT3000}projects`} className={styles.card}>
            <h2>2. Create a project &rarr;</h2>
            <p>
              Only authorized users can create a project. Please make sure you
              do not skip Step 1
            </p>
          </a>

          <a
            // href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>3. Install the package &rarr;</h2>
            <p> in your app.js </p>
            <p>
              <code className={styles.code}>
                npm install open-bug-tracker / yarn add open-bug-tracker
              </code>
            </p>
            <p>
              <code className={styles.code}>
                import Bugtracker from 'open-bug-tracker'
              </code>
            </p>
            <p> Add your project_id to the config </p>
            <p>
              <code className={styles.code}>Bugtracker.config(project_id)</code>
            </p>
          </a>

          <a href={`${localHost + PORT3000}projects`} className={styles.card}>
            <h2>
              4. Run the package in your app and explore the errors &rarr;
            </h2>
            <p>Go to my projects</p>
          </a>
          <LoginButton href={`${localHost + PORT8080}login/github`}>
            Sign in with GitHub
          </LoginButton>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        ></a>
      </footer>
    </div>
  );
};

export default Home;

// // Dear Next.js,
// // I want this page to be generated at build time
// // in my machine or in Github Actions
// // so later when users request this route
// // they get a static HTML.
// // Salute,
// export async function getStaticProps() {

// }

// Hey ya,
// I want this page to be generated at request time
// in the server machine when deployed
// so when a user requests this route
// all data is dynamically processed.
// Out,
export async function getServerSideProps(context: NextPageContext) {
  const { token } = context.query
  if (token) {
    context.res?.setHeader('set-cookie', `token=${token};SameSite=Lax;`)
  }

  return {
    props: {}
  }
}
